import { apiSlice } from "../../app/api/apiSlice";
import { setCart, clearCart } from "./cartSlice"
// import { setCredentials } from "./cartSlice";
/*  
    We inject cart-related api here using the injectEndpoints function into our apiSlice
    This is useful for code splitting and readability
*/
export const cartApiSlice = apiSlice.injectEndpoints({ //Any cart api is injected into our main api slice here
    endpoints: builder => ({ //Define endpoints that will be used by frontend


        restore: builder.query({//builder query
            query: () => '/api/cart/',
            async onQueryStarted(arg, {dispatch, queryFulfilled}) { //if query succesful, we automatically set our new state
                try {
              
                    const {data} = await queryFulfilled
                    dispatch(setCart({products: data.products}))
                    // console.log("cart restored!")
                } catch (err) {
                    console.log(err)
                }
            },
            providesTags: ["Cart"]
        }),

        addToCart: builder.mutation({
            query: payload => ({
                url: "/api/cart/add",
                method: "POST",
                body: payload
            }),
            invalidatesTags: ["Cart"]
        }),

        incrFromCart: builder.mutation({
            query: payload => ({
                url: "/api/cart/incr",
                method: "POST",
                body: payload
            }),
            invalidatesTags: ["Cart"]
        }),

        decrFromCart: builder.mutation({
            query: payload => ({
                url: "/api/cart/decr",
                method: "POST",
                body: payload
            }),
            invalidatesTags: ["Cart"] /* Calling this mutation invalidates any query which has "Cart" as it tags. 
                                         Therefore `restore` is called refetching the state of the cart and for instance, 
                                         updates our cart variable through useSelector(selectCurrCart) in Cart.jsx
                                      */
        }),

        sendClearCart: builder.mutation({
            query: () => ({
                url: "/api/cart/clear",
                method: "POST"
            }),
            async onQueryStarted(arg, {dispatch, queryFulfilled}) { //if query succesful, we automatically set our new state
                try {
                    await queryFulfilled
                    dispatch(clearCart())
                    // console.log("cart cleared!")
                } catch (err) {
                    console.log(err)
                }
            },

            invalidatesTags: ["Cart"]
        })
    })
})

export const {//custom react hook auto-generated by RTK Query 
    useRestoreQuery,
    useAddToCartMutation,
    useIncrFromCartMutation,
    useDecrFromCartMutation,
    useSendClearCartMutation
} = cartApiSlice

